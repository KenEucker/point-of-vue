type Query {
  self(from: Requestor): CreatorAccount
  google(from: Requestor!): CreatorAccount
  imgur(from: Requestor!): CreatorAccount
  github(from: Requestor!): CreatorAccount
  
  vues(from: Requestor!, where: VuesWhereInput): [VueComponent!]
  images(from: Requestor!, where: ImagesWhereInput): [ImgurImage!]
  albums(from: Requestor!, where: ImageAlbumsWhereInput): [ImgurImage!]
  docs(from: Requestor!): [Docule!]

  creator(where: CreatorByInput, id: Int): Creator
  creators(where: CreatorByInput, by: ForOptionsInput): [Creator]
  interaction(where: InteractionByInput, id: Int): Interaction
  interactions(where: InteractionByInput, by: ForOptionsInput): [Interaction]
  post(where: PostByInput, id: Int): Post
  posts(where: PostByInput, by: ForOptionsInput): [Post]

  getPostInteractions(id: Int!): GetPostInteractionsPayload
  searchPosts(search: SearchPostsInput!, by: ForOptionsInput): SearchPostsPayload
}

type Mutation {
  createCreator(creator: CreateCreatorInput!): Creator!
  updateCreator(data: UpdateCreatorInput!, id: Int): Creator!
  deleteCreator(creatorId: Int, where: CreatorByInput): Creator!
  verifyCreator(id: Int!): Creator!
  unVerifyCreator(id: Int!): Creator!

  createInteraction(interaction: CreateInteractionInput!): Interaction!
  toggleInteraction(data: UpdateInteractionInput!, id: Int): Interaction!
  deleteInteraction(interactionId: Int, where: InteractionByInput): Interaction!

  createPost(post: CreatePostInput!): Post!
  updatePost(data: UpdatePostInput!, id: Int): Post!
  deletePost(id: Int, where: PostByInput): Post!
  publishPost(id: Int!): Post!
  unPublishPost(id: Int!): Post!
}

type Subscription {
  countdown(from: Int): Int!
  creator(where: CreatorByInput): CreatorSubscriptionPayload
  interaction(where: InteractionByInput): InteractionSubscriptionPayload
  interactionDelta(where: InteractionByInput): InteractionDeltaSubscriptionPayload
  post(where: PostByInput): PostSubscriptionPayload
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
