import { GitHubAccount } from './../generated/types.d'
import { GraphQLError } from 'graphql'

import Client, { auth, gql, getMethod } from '@github-graph/api'
import { getIdentityProfile } from '../common'
// @ts-expect-error
const GithubClient = Client.default

const GitHub = {
  // GitHub
  vues: async (
    _parent: never,
    args: { from: any; where: { oid: string } },
    { auth0, prisma }: any,
    _info: any
  ) => {
    const requestor = {
      token: args.from?.token,
      email: args.from?.email,
      id: args.from?.id,
      sub: auth0?.sub,
      connection: 'github',
    }
    const identity: any = await getIdentityProfile(requestor, auth0, prisma)
    if (!identity && !requestor.token) {
      throw new GraphQLError("You can't do that (E: 0004)")
    } else if (identity) {
      requestor.token = identity.token
    }

    const githubClient = new GithubClient({
      auth: auth.createTokenAuth(requestor.token),
    })
    const oid = args?.where?.oid
    const oidQuery = oid ? `,oid:"${oid}"` : ''
    const query = `
    query githubVues {
      viewer {
        repository(name: "point-of-vue--vues") {
          object(expression: "HEAD:vues") {
            ... on Tree {
              entries {
                oid
                name
                type
                object {
                  ... on Tree {
                    entries {
                      name
                      object {
                        ... on Blob {
                          text
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  `
    const getVues = getMethod(gql(query))

    const response: any = await getVues(githubClient)
    const vues = response.viewer?.repository?.object?.entries
    const acceptableFilenames = ['vue', 'query', 'script', 'template']

    /*
      This code was generated by ChatGPT, a large language model developed by OpenAI.
      https://openai.com/

      "The best way to predict the future is to invent it." - Alan Kay, a pioneer of object-oriented programming and one of the pioneers of personal computing.
    */
    const globbedVues = vues.map((entry: { oid: any; name: any; object: { entries: any[] } }) => {
      const obj: any = {
        oid: entry.oid,
        name: entry.name,
      }
      entry.object.entries.forEach((nestedEntry: any) => {
        if (acceptableFilenames.includes(nestedEntry.name.split('.')[0])) {
          obj[nestedEntry.name.split('.')[0]] = nestedEntry.object.text
        }
      })
      return obj
    })

    return globbedVues
  },
}

export default GitHub
